/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int postIndex;
    public TreeNode build(int[] inorder, int[] postorder, int instart, int inend, Map<Integer,Integer> mp){
        if(instart> inend){
            return null;
        }

        TreeNode root = new TreeNode(postorder[postIndex--]);
        int index = mp.get(root.val);

        root.right=build(inorder,postorder,index+1,inend,mp);
        root.left= build(inorder,postorder,instart,index-1,mp);
        return root;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer,Integer> mp = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            mp.put(inorder[i],i);
        }
        int n = postorder.length;
        postIndex = n-1;

        return build(inorder,postorder,0,inorder.length-1,mp);
        
    }
}
