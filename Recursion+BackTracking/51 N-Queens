class Solution {

    boolean isSafe(char[][] board, int row, int col, int n){
        for(int j=0;j<col;j++){
            if(board[row][j]=='Q'){
                return false;
            }
        }
        for(int i=0;i<row;i++){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        for(int i=row,j=col;i>=0&&j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i=row,j=col;j<n && i>=0;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }

    List<String> construct(char[][] board){
        List<String> res = new ArrayList<>();
        for(int i=0;i<board.length;i++){
            res.add(new String(board[i]));
        }
        return res;
    }

    void nQueens(char[][]board,int row, int n , List<List<String>> ans){
        if(row == n){
            ans.add(construct(board));
            return;
        }
        for(int j=0;j<n;j++){
            if(isSafe(board,row,j,n)){
                board[row][j]='Q';
                nQueens(board,row+1,n,ans);
                board[row][j]='.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
       List<List<String>> ans  = new ArrayList<>();
        char[][] board = new char[n][n];

        for(int i=0;i<n;i++){
            Arrays.fill(board[i],'.');
        }

        nQueens(board,0,n,ans);
        return ans;
        
    }
}
